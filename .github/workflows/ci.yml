name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write  # Required for OIDC authentication with Chainguard identity

env:
  GO_VERSION: 1.24.6
  FIPS_ENABLED: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - name: Lint
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - name: Test
        run: make test

  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - name: build-package/package
        run: make package

  build-amd64:
    name: Build AMD64
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - name: Build Docker Image for AMD64
        run: make build-image-amd64-with-tags

  build-arm64:
    name: Build ARM64
    runs-on: ubuntu-24.04-arm
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      - name: Build Docker Image for ARM64
        run: make build-image-arm64-with-tags

  fips-build-amd64:
    name: FIPS Build AMD64
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Build FIPS Docker Image for AMD64
        run: make build-image-fips-amd64-with-tags

  fips-build-arm64:
    name: FIPS Build ARM64
    runs-on: ubuntu-24.04-arm
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    timeout-minutes: 30
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Build FIPS Docker Image for ARM64
        run: make build-image-fips-arm64-with-tags

  fips-security-scan:
    name: FIPS Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Build FIPS Docker image for scanning
        run: make build-image-fips-amd64-with-tags
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # 0.32.0
        with:
          image-ref: "mattermost/mattermost-push-proxy-fips:${{ github.ref == 'refs/heads/master' && 'master-fips' || format('dev-{0}-fips', github.sha) }}"
          format: 'table'

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Build Docker image for scanning
        run: make build-image-amd64-with-tags
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4 # 0.32.0
        with:
          image-ref: "mattermost-push-proxy:${{ github.ref == 'refs/heads/master' && 'master' || format('dev-{0}', github.sha) }}"
          format: 'table'

  pr-deploy-amd64:
    name: PR Deploy AMD64
    runs-on: ubuntu-latest
    needs: [security-scan, build-amd64]
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push AMD64 PR images
        run: |
          # Build with default APP_NAME (avoids filesystem issues)
          make build-image-amd64-with-tags
          
          # Retag with correct namespace for pushing  
          docker tag mattermost-push-proxy:dev-${{ github.sha }}-amd64 mattermost/mattermost-push-proxy:dev-${{ github.sha }}-amd64
          docker tag mattermost-push-proxy:dev-${{ github.sha }} mattermost/mattermost-push-proxy:dev-${{ github.sha }}
          
          # Push to correct namespace
          docker push mattermost/mattermost-push-proxy:dev-${{ github.sha }}-amd64
          echo "✅ AMD64 image pushed: mattermost/mattermost-push-proxy:dev-${{ github.sha }}-amd64"
          
  pr-deploy-arm64:
    name: PR Deploy ARM64  
    runs-on: ubuntu-24.04-arm
    needs: [security-scan, build-arm64]
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push ARM64 PR images
        run: |
          # Build with default APP_NAME (avoids filesystem issues)
          make build-image-arm64-with-tags
          
          # Retag with correct namespace for pushing
          docker tag mattermost-push-proxy:dev-${{ github.sha }}-arm64 mattermost/mattermost-push-proxy:dev-${{ github.sha }}-arm64
          docker tag mattermost-push-proxy:dev-${{ github.sha }} mattermost/mattermost-push-proxy:dev-${{ github.sha }}
          
          # Push to correct namespace
          docker push mattermost/mattermost-push-proxy:dev-${{ github.sha }}-arm64
          echo "✅ ARM64 image pushed: mattermost/mattermost-push-proxy:dev-${{ github.sha }}-arm64"

  pr-deploy-manifest:
    name: PR Deploy Manifest
    runs-on: ubuntu-latest
    needs: [pr-deploy-amd64, pr-deploy-arm64]
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create and push multi-arch manifest
        run: |
          # Create multi-platform manifest for PR testing
          docker manifest create mattermost/mattermost-push-proxy:dev-${{ github.sha }} \
            --amend mattermost/mattermost-push-proxy:dev-${{ github.sha }}-amd64 \
            --amend mattermost/mattermost-push-proxy:dev-${{ github.sha }}-arm64
          docker manifest push mattermost/mattermost-push-proxy:dev-${{ github.sha }}
          
          # Clean up intermediate architecture-specific tags (like production)
          echo "Cleaning up intermediate architecture-specific tags..."
          docker rmi mattermost/mattermost-push-proxy:dev-${{ github.sha }}-amd64 2>/dev/null || true
          docker rmi mattermost/mattermost-push-proxy:dev-${{ github.sha }}-arm64 2>/dev/null || true
          echo "✅ Multi-arch PR image available (arch-specific tags removed):"
          echo "  docker pull mattermost/mattermost-push-proxy:dev-${{ github.sha }}"

  pr-deploy-fips-amd64:
    name: PR Deploy FIPS AMD64
    runs-on: ubuntu-latest
    needs: [fips-security-scan, fips-build-amd64] 
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard Identity
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push FIPS AMD64 PR images
        run: |
          # Build with default APP_NAME (avoids filesystem issues)
          make build-image-fips-amd64-with-tags
          
          # Retag with correct namespace for pushing
          docker tag mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64 mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64
          docker tag mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips
          
          # Push to correct namespace  
          docker push mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64
          echo "✅ FIPS AMD64 image pushed: mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64"

  pr-deploy-fips-arm64:
    name: PR Deploy FIPS ARM64
    runs-on: ubuntu-24.04-arm
    needs: [fips-security-scan, fips-build-arm64]
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard Identity
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push FIPS ARM64 PR images
        run: |
          # Build with default APP_NAME (avoids filesystem issues)
          make build-image-fips-arm64-with-tags
          
          # Retag with correct namespace for pushing
          docker tag mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64 mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64
          docker tag mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips
          
          # Push to correct namespace
          docker push mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64
          echo "✅ FIPS ARM64 image pushed: mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64"

  pr-deploy-fips-manifest:
    name: PR Deploy FIPS Manifest
    runs-on: ubuntu-latest
    needs: [pr-deploy-fips-amd64, pr-deploy-fips-arm64]
    if: github.event_name == 'pull_request' && github.repository_owner == 'mattermost' && github.actor != 'dependabot[bot]'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Create and push FIPS multi-arch manifest
        run: |
          # Create multi-platform FIPS manifest for PR testing
          docker manifest create mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips \
            --amend mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64 \
            --amend mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64
          docker manifest push mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips
          
          # Clean up intermediate FIPS architecture-specific tags (like production)
          echo "Cleaning up intermediate FIPS architecture-specific tags..."
          docker rmi mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-amd64 2>/dev/null || true
          docker rmi mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips-arm64 2>/dev/null || true
          echo "✅ Multi-arch FIPS PR image available (arch-specific tags removed):"
          echo "  docker pull mattermost/mattermost-push-proxy-fips:dev-${{ github.sha }}-fips"



  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, build-amd64, build-arm64]
    if: github.repository_owner == 'mattermost' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) && github.actor != 'dependabot[bot]'
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push AMD64 image
        run: |
          # Build AMD64 image with correct tag (using commit SHA)
          SHORT_SHA=${GITHUB_SHA:0:7}
          make build-image-amd64-with-tags
          # Retag with correct namespace using short SHA
          docker tag mattermost-push-proxy:master-amd64 mattermost/mattermost-push-proxy:${SHORT_SHA}-amd64
          docker tag mattermost-push-proxy:master mattermost/mattermost-push-proxy:${SHORT_SHA}
          # Push AMD64 image
          docker push mattermost/mattermost-push-proxy:${SHORT_SHA}-amd64
      
      - name: Build and push ARM64 image  
        run: |
          # Build ARM64 image with correct tag (using commit SHA)
          SHORT_SHA=${GITHUB_SHA:0:7}
          make build-image-arm64-with-tags
          # Retag with correct namespace using short SHA
          docker tag mattermost-push-proxy:master-arm64 mattermost/mattermost-push-proxy:${SHORT_SHA}-arm64
          # Push ARM64 image
          docker push mattermost/mattermost-push-proxy:${SHORT_SHA}-arm64
      
      - name: Create and push multi-arch manifest
        run: |
          # Create multi-platform manifest using commit SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          docker manifest create mattermost/mattermost-push-proxy:${SHORT_SHA} \
            --amend mattermost/mattermost-push-proxy:${SHORT_SHA}-amd64 \
            --amend mattermost/mattermost-push-proxy:${SHORT_SHA}-arm64
          docker manifest push mattermost/mattermost-push-proxy:${SHORT_SHA}

  fips-deploy:
    name: FIPS Deploy
    runs-on: ubuntu-latest
    needs: [fips-security-scan, fips-build-amd64, fips-build-arm64]
    if: github.repository_owner == 'mattermost' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) && github.actor != 'dependabot[bot]'
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0
      
      - name: Setup Chainguard Identity
        uses: chainguard-dev/setup-chainctl@v0.3.2
        with:
          identity: ${{ secrets.CHAINGUARD_IDENTITY }}
      
      - name: Login to Docker Hub
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: matterbuild
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push FIPS AMD64 image
        run: |
          # Build FIPS AMD64 image with correct tag (using commit SHA)
          SHORT_SHA=${GITHUB_SHA:0:7}
          make build-image-fips-amd64-with-tags
          # Retag with short SHA
          docker tag mattermost/mattermost-push-proxy-fips:master-fips-amd64 mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-amd64
          # Push FIPS AMD64 image
          docker push mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-amd64
      
      - name: Build and push FIPS ARM64 image
        run: |
          # For FIPS ARM64 builds, we need CGO_ENABLED=1 for FIPS compliance
          # Use Docker buildx with proper platform specification for cross-compilation
          SHORT_SHA=${GITHUB_SHA:0:7}
          
          # Build FIPS ARM64 image with correct tag (using commit SHA)
          # Use buildx for proper ARM64 cross-compilation with FIPS
          docker buildx build --no-cache --pull \
            --platform linux/arm64 \
            --build-arg BUILD_IMAGE=cgr.dev/mattermost.com/go-msft-fips:1.24.6 \
            --build-arg BASE_IMAGE=cgr.dev/mattermost.com/glibc-openssl-fips:15.1 \
            --build-arg TARGETOS=linux \
            --build-arg TARGETARCH=arm64 \
            --tag mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-arm64 \
            --file docker/Dockerfile.fips \
            --load \
            .
          
          # Push FIPS ARM64 image
          docker push mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-arm64
      
      - name: Create and push FIPS multi-arch manifest
        run: |
          # Create multi-platform manifest for FIPS using commit SHA
          SHORT_SHA=${GITHUB_SHA:0:7}
          docker manifest create mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips \
            --amend mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-amd64 \
            --amend mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips-arm64
          docker manifest push mattermost/mattermost-push-proxy-fips:${SHORT_SHA}-fips

      - name: Create FIPS release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make github-release-fips
      
      - name: Cleanup
        run: make clean
